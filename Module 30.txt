set global log_bin_trust_function_creators=1;

CREATE TABLE BOOKS (
                       BOOK_ID int(11) NOT NULL AUTO_INCREMENT,
                       TITLE varchar(255) NOT NULL,
                       PUBYEAR int(4) NOT NULL,
                       BESTSELLER boolean NOT NULL,
                       PRIMARY KEY (BOOK_ID)
);

CREATE TABLE READERS (
                         READER_ID int(11) NOT NULL AUTO_INCREMENT,
                         FIRSTNAME varchar(255) NOT NULL,
                         LASTNAME varchar(255) NOT NULL,
                         PESELID varchar(11) NOT NULL,
                         VIP_LEVEL varchar(20) NULL,
                         PRIMARY KEY (READER_ID)
);

CREATE TABLE RENTS (
                       RENT_ID int(11) NOT NULL AUTO_INCREMENT,
                       BOOK_ID int(11) NOT NULL,
                       READER_ID int(11) NOT NULL,
                       RENT_DATE datetime NOT NULL,
                       RETURN_DATE datetime,
                       PRIMARY KEY (RENT_ID),
                       FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID),
                       FOREIGN KEY (READER_ID) REFERENCES READERS(READER_ID)
);

# DROP TABLE RENTS;
# DROP TABLE READERS;
# DROP TABLE BOOKS;

INSERT INTO READERS(READER_ID, FIRSTNAME, LASTNAME, PESELID,VIP_LEVEL)
VALUES (1, 'John', 'Smith', '83012217938','5');

INSERT INTO READERS(READER_ID, FIRSTNAME, LASTNAME, PESELID,VIP_LEVEL)
VALUES (2, 'Curtis', 'Wilson', '75121002790','2');

INSERT INTO READERS(READER_ID, FIRSTNAME, LASTNAME, PESELID, VIP_LEVEL)
VALUES (3, 'Cathy', 'Booker', '90112801727','10');

INSERT INTO READERS(READER_ID, FIRSTNAME, LASTNAME, PESELID,VIP_LEVEL)
VALUES (4, 'Marissa', 'Cain', '84061908044','7');

INSERT INTO READERS( READER_ID, FIRSTNAME, LASTNAME, PESELID,VIP_LEVEL)
VALUES (5,'Muriel', 'Fulton', '76081409269','5');

COMMIT;

DROP TABLE READERS;

DELETE FROM READERS WHERE READER_ID;

SELECT  * FROM READERS;

INSERT INTO BOOKS(BOOK_ID,TITLE, PUBYEAR, BESTSELLER)
VALUES (1,'The Stranger', 1942, true);

INSERT INTO BOOKS(BOOK_ID,TITLE, PUBYEAR, BESTSELLER)
VALUES (2,'In Search of Lost Time', 1927, false);

INSERT INTO BOOKS(BOOK_ID,TITLE, PUBYEAR, BESTSELLER)
VALUES (3,'The Trial', 1925, true);

INSERT INTO BOOKS(BOOK_ID,TITLE, PUBYEAR, BESTSELLER)
VALUES (4,'The Little Prince', 1943, false);

INSERT INTO BOOKS(BOOK_ID,TITLE, PUBYEAR, BESTSELLER)
VALUES (5,'Man"s Fate', 1933, true);

COMMIT;

SELECT * FROM BOOKS;

DROP TABLE BOOKS;

# DELETE FROM BOOKS
# WHERE BOOK_ID = 5;

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (1, 1, DATE_SUB(CURDATE(), INTERVAL 10 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (2, 1, DATE_SUB(CURDATE(), INTERVAL 10 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (4, 1, DATE_SUB(CURDATE(), INTERVAL 10 DAY), DATE_SUB(CURDATE(), INTERVAL 5 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (1, 3, DATE_SUB(CURDATE(), INTERVAL 8 DAY), null);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 3, DATE_SUB(CURDATE(), INTERVAL 4 DAY), DATE_SUB(CURDATE(), INTERVAL 2 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 4, DATE_SUB(CURDATE(), INTERVAL 10 DAY), DATE_SUB(CURDATE(), INTERVAL 8 DAY));

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (5, 5, DATE_SUB(CURDATE(), INTERVAL 8 DAY), null);

COMMIT;

DELIMITER $$

CREATE PROCEDURE ListBooks()
BEGIN
    SELECT * FROM BOOKS;
END $$

DELIMITER ;

CALL ListBooks();


DROP PROCEDURE IF EXISTS ListBooks;


DELIMITER $$

CREATE PROCEDURE ListBooks()
BEGIN
    SELECT BOOK_ID, TITLE, PUBYEAR FROM BOOKS;
END $$

DELIMITER ;

CALL ListBooks();


DROP FUNCTION IF EXISTS VipLevel;

DELIMITER $$

CREATE FUNCTION VipLevel() RETURNS VARCHAR(20) DETERMINISTIC
BEGIN
    RETURN 'Standard customer';
END $$

DELIMITER ;

SELECT VipLevel() AS LEVEL;


DROP FUNCTION IF EXISTS VipLevel;

DELIMITER $$

CREATE FUNCTION VipLevel() RETURNS VARCHAR(20) DETERMINISTIC
BEGIN
    DECLARE result VARCHAR(20) DEFAULT 'Standard customer';  -- [1]
    RETURN result;  -- [2]
END $$

DELIMITER ;

SELECT VipLevel() AS LEVEL;


DROP FUNCTION IF EXISTS VipLevel;

DELIMITER $$

CREATE FUNCTION VipLevel(booksrented INT) RETURNS VARCHAR(20) DETERMINISTIC
BEGIN
    DECLARE result VARCHAR(20) DEFAULT 'Standard customer';
    IF booksrented >= 10 THEN
        SET result = 'Gold customer';
    ELSEIF booksrented >= 5 AND booksrented < 10 THEN
        SET result = 'Silver customer';
    ELSEIF booksrented >= 2 AND booksrented < 5 THEN
        SET result = 'Bronze customer';
    ELSE
        SET result = 'Standard customer';
    END IF;
    RETURN result;
END $$

DELIMITER ;

SELECT VipLevel(12) AS LEVEL;


DROP FUNCTION IF EXISTS VipId;

DELIMITER $$

CREATE FUNCTION VipId(bookid INT) RETURNS VARCHAR(20) DETERMINISTIC
BEGIN
    DECLARE result VARCHAR(20) DEFAULT 'Empty identifier';
    IF bookid = 10 THEN
        SET result = 'Highest identifier';
    ELSEIF bookid >= 7 AND bookid < 10 THEN
        SET result = 'Higher identifier';
    ELSEIF bookid >= 5 AND bookid < 7 THEN
        SET result = 'Medium identifier';
    ELSEIF bookid >= 2 AND bookid < 5 THEN
        SET result = 'lower identifier';
    ELSEIF  bookid < 2 THEN
        SET result = 'lowest identifier';
    ELSE
        SET result = 'Empty identifier';
    END IF;
    RETURN result;
END $$

DELIMITER ;

SELECT VipId(10) AS LEVEL;

ALTER TABLE READERS ADD VIP_LEVEL VARCHAR(20);

DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD INT;

    SELECT COUNT(*) FROM RENTS
    WHERE READER_ID = 3
    INTO BOOKSREAD;

    SELECT BOOKSREAD;
END $$

DELIMITER ;


CALL UpdateVipLevels();


DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD INT;
    DECLARE DAYS INT;

    SELECT COUNT(*) FROM RENTS
    WHERE READER_ID = 3
    INTO BOOKSREAD;

    SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) + 1 FROM RENTS
    WHERE READER_ID = 3
    INTO DAYS;

    SELECT BOOKSREAD, DAYS;
END $$

DELIMITER ;

CALL UpdateVipLevels();


DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD INT;
    DECLARE DAYS INT;
    DECLARE BOOKSPERMONTH DECIMAL(5,2);

    SELECT COUNT(*) FROM RENTS
    WHERE READER_ID = 3
    INTO BOOKSREAD;

    SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) + 1 FROM RENTS
    WHERE READER_ID = 3
    INTO DAYS;

    SET BOOKSPERMONTH = BOOKSREAD / DAYS * 30;

    SELECT BOOKSREAD, DAYS, BOOKSPERMONTH;
END $$

DELIMITER ;

CALL UpdateVipLevels();



DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD, DAYS, RDR_ID INT;
    DECLARE BOOKSPERMONTH DECIMAL(5,2);
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_READERS CURSOR FOR SELECT READER_ID FROM READERS;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;
    OPEN ALL_READERS;
    WHILE (FINISHED = 0) DO
            FETCH ALL_READERS INTO RDR_ID;
            IF (FINISHED = 0) THEN
                SELECT COUNT(*) FROM RENTS
                WHERE READER_ID = RDR_ID
                INTO BOOKSREAD;

                SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) + 1 FROM RENTS
                WHERE READER_ID = RDR_ID
                INTO DAYS;

                SET BOOKSPERMONTH = BOOKSREAD / DAYS * 30;

                UPDATE READERS SET VIP_LEVEL = VipLevel(BOOKSPERMONTH)
                WHERE READER_ID = RDR_ID;
                COMMIT;
            END IF;
        END WHILE;
    CLOSE ALL_READERS;
END $$

DELIMITER ;

CALL UpdateVipLevels();

SELECT * FROM READERS;


# TASK 30.2
DROP FUNCTION IF EXISTS BorrowBooks;

DELIMITER $$

CREATE FUNCTION BorrowBooks(value BOOLEAN) RETURNS VARCHAR(34) DETERMINISTIC
BEGIN
    DECLARE borrow INT;

    IF borrow > 2 THEN
        SET value = true;
    ELSEIF borrow > 0 AND borrow < 2 THEN
        SET value = false;
    ELSE
        SET value = false;
    END IF;
    RETURN value;
END $$

DELIMITER ;


DROP PROCEDURE IF EXISTS UpdateBestSellers;

DELIMITER $$

CREATE PROCEDURE UpdateBestSellers()
BEGIN
    DECLARE BOOKSREAD, BKS_ID INT;
    DECLARE VALUE BOOLEAN;
    DECLARE FINISHED INT DEFAULT 1;
    DECLARE ALL_BOOKS CURSOR FOR SELECT BOOK_ID FROM BOOKS;
    OPEN ALL_BOOKS;
    WHILE (FINISHED = 0) DO
            FETCH ALL_BOOKS INTO BKS_ID;
            IF (FINISHED = 0) THEN
                SELECT COUNT(*) FROM RENTS
                WHERE BOOK_ID = BKS_ID
                INTO BOOKSREAD;

                UPDATE BOOKS SET BESTSELLER = BorrowBooks(VALUE)
                WHERE BKS_ID = VALUE;
                COMMIT;
            END IF;
        END WHILE;
    CLOSE ALL_BOOKS;
END $$

DELIMITER ;

CALL UpdateBestSellers();

SELECT * FROM BOOKS;

SHOW PROCEDURE STATUS;

SHOW CREATE PROCEDURE UpdateVipLevels;

SELECT * FROM READERS;


SET @RENTSQTY = 0;

DELIMITER $$

CREATE TRIGGER RENTSCOUNTER BEFORE INSERT ON RENTS
    FOR EACH ROW
BEGIN
    SET @RENTSQTY = @RENTSQTY + 1;
END $$

DELIMITER ;

SELECT @RENTSQTY;

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(1, 3, DATE_SUB(CURDATE(), INTERVAL 5 DAY), NULL);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(2, 3, DATE_SUB(CURDATE(), INTERVAL 2 DAY), NULL);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(3, 1, DATE_SUB(CURDATE(), INTERVAL 5 DAY), NULL);

INSERT INTO RENTS(BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES(2, 4, DATE_SUB(CURDATE(), INTERVAL 3 DAY), NULL);

COMMIT;

SELECT @RENTSQTY;

DROP TRIGGER RENTSCOUNTER;

CREATE TABLE RENTS_AUD (
                           EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           RENT_ID INT(11) NOT NULL,
                           OLD_BOOK_ID INT(11),
                           NEW_BOOK_ID INT(11),
                           OLD_READER_ID INT(11),
                           NEW_READER_ID INT(11),
                           OLD_RENT_DATE DATETIME,
                           NEW_RENT_DATE DATETIME,
                           OLD_RETURN_DATE DATETIME,
                           NEW_RETURN_DATE DATETIME,
                           PRIMARY KEY (EVENT_ID)
);

DELIMITER $$

CREATE TRIGGER RENTS_INSERT AFTER INSERT ON RENTS
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID, NEW_BOOK_ID, NEW_READER_ID,
                           NEW_RENT_DATE, NEW_RETURN_DATE)
        VALUE(CURTIME(), 'INSERT', NEW.RENT_ID, NEW.BOOK_ID, NEW.READER_ID, NEW.RENT_DATE,
              NEW.RETURN_DATE);
END $$

DELIMITER ;

INSERT INTO RENTS (BOOK_ID, READER_ID, RENT_DATE, RETURN_DATE)
VALUES (2, 4, DATE_SUB(CURDATE(), INTERVAL 5 DAY), NULL);

COMMIT;

SELECT * FROM RENTS_AUD;

DROP  TRIGGER IF EXISTS  RENTS_DELETE;

DELIMITER $$

CREATE TRIGGER RENTS_DELETE AFTER DELETE ON RENTS
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID)
        VALUE(CURTIME(), 'DELETE', OLD.RENT_ID);
END $$

DELIMITER ;

DELETE FROM RENTS WHERE RENT_ID = 24;

COMMIT;

SELECT * FROM RENTS_AUD;

DROP TRIGGER IF EXISTS RENTS_UPDATE;

DELIMITER $$

CREATE TRIGGER RENTS_UPDATE AFTER UPDATE ON RENTS
    FOR EACH ROW
BEGIN
    INSERT INTO RENTS_AUD (EVENT_DATE, EVENT_TYPE, RENT_ID, NEW_BOOK_ID, NEW_READER_ID,
                           NEW_RENT_DATE, NEW_RETURN_DATE, OLD_BOOK_ID, OLD_READER_ID,
                           OLD_RENT_DATE, OLD_RETURN_DATE)
        VALUE(CURTIME(), 'UPDATE', OLD.RENT_ID, NEW.BOOK_ID, NEW.READER_ID,
              NEW.RENT_DATE, NEW.RETURN_DATE, OLD.BOOK_ID, OLD.READER_ID,
              OLD.RENT_DATE, OLD.RETURN_DATE);
END $$

DELIMITER ;

UPDATE RENTS SET RETURN_DATE = CURDATE()
WHERE RENT_ID = 20;

COMMIT;

SELECT * FROM RENTS_AUD;


CREATE TABLE BOOKS_AUD (
                           EVENT_B_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           BOOK_ID INT(11) NOT NULL,
                           TITLE VARCHAR(10),
                           PUBYEAR INT(11),
                           BESTSELLER BOOLEAN,
                           OLD_BOOK_ID INT(11),
                           NEW_BOOK_ID INT(11),
                           OLD_RETURN_DATE DATETIME,
                           NEW_RETURN_DATE DATETIME,
                           PRIMARY KEY (EVENT_B_ID)
);


DROP TABLE  BOOKS_AUD;


DROP TRIGGER IF EXISTS BOOKS_INSERT;

DELIMITER $$

CREATE TRIGGER BOOKS_INSERT AFTER INSERT ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, TITLE, PUBYEAR, BESTSELLER)
        VALUE(CURTIME(), 'INSERT', NEW.BOOK_ID,  NEW.TITLE, NEW.PUBYEAR, NEW.BESTSELLER);
END $$

DELIMITER ;

INSERT INTO BOOKS (BOOK_ID, TITLE, PUBYEAR, BESTSELLER)
VALUES (6, 'KODILLA', 2015, true);

COMMIT;

SELECT * FROM BOOKS_AUD;


DROP TRIGGER IF EXISTS  BOOKS_DELETE;

DELIMITER $$

CREATE TRIGGER BOOKS_DELETE AFTER DELETE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, TITLE, PUBYEAR, BESTSELLER)
        VALUE(CURTIME(), 'DELETE', OLD.BOOK_ID, OLD.TITLE, OLD.PUBYEAR, OLD.BESTSELLER);
END $$

DELIMITER ;

DELETE FROM BOOKS WHERE BOOK_ID = 6;

COMMIT;

SELECT * FROM BOOKS_AUD;


DROP TRIGGER IF EXISTS BOOKS_UPDATE;

DELIMITER $$

CREATE TRIGGER BOOKS_UPDATE AFTER UPDATE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, TITLE, PUBYEAR, BESTSELLER)
        VALUE(CURTIME(), 'UPDATE', OLD.BOOK_ID,  OLD.TITLE, OLD.PUBYEAR, OLD.BESTSELLER);
END $$

DELIMITER ;

UPDATE BOOKS SET TITLE = 'DUPA GONI MNIE'
WHERE BOOK_ID = 5;

COMMIT;

SELECT * FROM BOOKS_AUD;

SELECT  * FROM  BOOKS;


CREATE TABLE READERS_AUD (
                             EVENT_R_ID INT(11) NOT NULL AUTO_INCREMENT,
                             EVENT_DATE DATETIME NOT NULL,
                             EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                             READER_ID INT(11) NOT NULL,
                             OLD_READER_ID INT(11),
                             NEW_READER_ID INT(11),
                             OLD_READER_DATE DATETIME,
                             NEW_READER_DATE DATETIME,
                             OLD_RETURN_DATE DATETIME,
                             NEW_RETURN_DATE DATETIME,
                             PRIMARY KEY (EVENT_R_ID)
);

DROP TABLE  READERS_AUD;


DROP TRIGGER IF EXISTS READERS_INSERT;

DELIMITER $$

CREATE TRIGGER READERS_INSERT AFTER INSERT ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE,READER_ID, NEW_READER_ID, NEW_READER_DATE, NEW_RETURN_DATE)
        VALUE(CURTIME(), 'INSERT', READER_ID, NEW.READER_ID, NEW_READER_DATE, NEW_RETURN_DATE
        );
END $$

DELIMITER ;

INSERT INTO READERS (READER_ID, FIRSTNAME, LASTNAME, PESELID, VIP_LEVEL)
VALUES (6, 'Dawid', 'Kocik', 346675621, 'Gold customer');

COMMIT;

SELECT * FROM READERS_AUD;


DROP TRIGGER IF EXISTS  READERS_DELETE;

DELIMITER $$

CREATE TRIGGER READERS_DELETE AFTER DELETE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID)
        VALUE(CURTIME(), 'DELETE', OLD.READER_ID);
END $$

DELIMITER ;

DELETE FROM READERS WHERE READER_ID = 6;

COMMIT;

SELECT * FROM READERS_AUD;


DROP TRIGGER IF EXISTS READERS_UPDATE;

DELIMITER $$

CREATE TRIGGER READERS_UPDATE AFTER UPDATE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, OLD_READER_ID, NEW_READER_ID, OLD_READER_DATE,
                           NEW_READER_DATE, OLD_RETURN_DATE, NEW_RETURN_DATE)
        VALUE(CURTIME(), 'UPDATE',READER_ID, OLD_READER_ID, NEW_READER_ID, OLD_READER_DATE,
              NEW_READER_DATE, NEW_RETURN_DATE, OLD_RETURN_DATE
        );
END $$

DELIMITER ;

UPDATE READERS SET FIRSTNAME = 'Dawid'
WHERE READER_ID = 5;

COMMIT;

SELECT * FROM READERS_AUD;

SELECT  * FROM  READERS;


DROP VIEW IF EXISTS BOOKS_AND_READERS;

CREATE VIEW BOOKS_AND_READERS AS
SELECT RD.READER_ID, RD.FIRSTNAME, RD.LASTNAME, BK.TITLE, RT.RENT_DATE, RT.RETURN_DATE
FROM READERS RD, BOOKS BK, RENTS RT
WHERE RT.BOOK_ID = BK.BOOK_ID
  AND RT.READER_ID = RD.READER_ID
ORDER BY RT.RENT_DATE;

SELECT  * FROM  BOOKS_AND_READERS;

SELECT * FROM BOOKS_AND_READERS
WHERE RENT_DATE > DATE_SUB(CURDATE(), INTERVAL 10 DAY)
ORDER BY LASTNAME;

SHOW PROCESSLIST;

USE KODILLA_COURSE;

CREATE EVENT UPDATE_VIPS
    ON SCHEDULE EVERY 1 MINUTE
    DO CALL UpdateVipLevels();

SHOW PROCESSLIST;

UPDATE READERS
    SET VIP_LEVEL = 'No set'
WHERE READER_ID;

SELECT  * from READERS;

DROP EVENT UPDATE_VIPS;

CREATE TABLE STATS (
        STAT_ID INT(11) AUTO_INCREMENT PRIMARY KEY,
        STAT_DATE DATETIME NOT NULL,
        STAT VARCHAR(20) NOT NULL,
        VALUE INT(11) NOT NULL
);

DROP TABLE STATS;

DROP VIEW IF EXISTS BESTSELLERS_COUNT;

CREATE VIEW BESTSELLERS_COUNT AS
SELECT ST.STAT_ID, ST.STAT_DATE, ST.STAT, ST.VALUE, BK.TITLE, BK.BESTSELLER
FROM STATS ST, BOOKS BK
WHERE ST.STAT_ID = BK.BOOK_ID
ORDER BY ST.STAT_DATE;

SELECT  * FROM  BESTSELLERS_COUNT;

CREATE EVENT UPDATE_BESTSELLERS_COUNT
    ON SCHEDULE EVERY 1 MINUTE
    DO CALL UpdateBestSellers();

SHOW PROCESSLIST;

USE KODILLA_COURSE;

UPDATE BOOKS
SET BESTSELLER = false
WHERE BOOK_ID = 4;

SELECT  * from BOOKS;

DROP EVENT IF EXISTS UPDATE_BESTSELLERS_COUNT;


CREATE TABLE PHONES (
                        PHONE_ID INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                        PHONENUM INT(9),
                        FIRSTNAME VARCHAR(50),
                        LASTNAME VARCHAR(50)
);

DELIMITER $$

CREATE PROCEDURE FillTestData()
BEGIN
    DECLARE K INT DEFAULT 0;
    WHILE (K < 100000) DO
            INSERT INTO PHONES (PHONENUM,
                                FIRSTNAME,
                                LASTNAME)
            VALUES(ROUND(RAND()*1000000000),
                   CONCAT('Firstname number ', K),
                   CONCAT('Lastname number ', K));
            IF (MOD(K, 5000) = 0) THEN
                COMMIT;
            END IF;
            SET K = K + 1;
        END WHILE;
    COMMIT;
END $$

DELIMITER ;

CALL FillTestData();

CREATE TABLE PHONESTATS (
   PHONE_STATS_ID  INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   RANGE_FROM INT(11),
   RANGE_TO INT(11),
   QUANTITY INT(11)
);

DELIMITER $$

CREATE PROCEDURE CalcPhoneStats()
BEGIN
    DECLARE K INT(11) DEFAULT 0;
    DECLARE QTY INT(11);
    DELETE FROM PHONESTATS WHERE PHONE_STATS_ID;
    COMMIT;
    WHILE (K < 100000000) DO
            SELECT COUNT(*)
            FROM PHONES
            WHERE PHONENUM BETWEEN K-99999 AND K
            INTO QTY;
            INSERT INTO PHONESTATS (RANGE_FROM, RANGE_TO, QUANTITY)
            VALUES (K-99999, K, QTY);
            COMMIT;
            SET K = K + 100000;
        END WHILE;
END $$

DELIMITER ;

CALL CalcPhoneStats();

SELECT * FROM PHONESTATS;

EXPLAIN SELECT COUNT(*)
    FROM PHONES
    WHERE  PHONENUM BETWEEN 1 AND 100000;

CREATE INDEX PHONENO ON PHONES (PHONENUM);


CREATE TABLE BOOKS_AND_READERS_FOR_LIBRARY (
                        BOOKS_AND_READERS_ID INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                        BOOK_ID INT(9),
                        READER_ID INT(9),
                        FIRSTNAME VARCHAR(50),
                        LASTNAME VARCHAR(50),
                        TITLE VARCHAR(50)
);

DROP TABLE IF EXISTS BOOKS_AND_READERS_FOR_LIBRARY;

SELECT  * FROM  BOOKS_AND_READERS_FOR_LIBRARY;

DROP PROCEDURE IF EXISTS FillTestForLibraryData;

DELIMITER $$

CREATE PROCEDURE FillTestForLibraryData()
BEGIN
    DECLARE K INT DEFAULT 0;
    WHILE (K < 10) DO
            INSERT INTO BOOKS_AND_READERS_FOR_LIBRARY (BOOK_ID,
                                                       READER_ID,
                                                       FIRSTNAME,
                                                       LASTNAME,
                                                       TITLE)
            VALUES(ROUND(RAND()*10),
                   ROUND(RAND()*10),
                   CONCAT('Firstname', K),
                   CONCAT('Lastname', K),
                   CONCAT('Title of book', K));
            IF (MOD(K, 5) = 0) THEN
                COMMIT;
            END IF;
            SET K = K + 1;
        END WHILE;
    COMMIT;
END $$

DELIMITER ;

CALL FillTestForLibraryData();


CREATE TABLE LIBRARY_STATS (
                            LIBRARY_STATS_ID INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                            RANGE_FROM INT(11),
                            RANGE_TO INT(11),
                            QUANTITY INT(11)
);

SELECT * FROM LIBRARY_STATS;

DROP PROCEDURE IF EXISTS CalcLibraryStats;

DELIMITER $$

CREATE PROCEDURE CalcLibraryStats()
BEGIN
    DECLARE K INT(11) DEFAULT 0;
    DECLARE QTY INT(11);
    DELETE FROM LIBRARY_STATS WHERE LIBRARY_STATS_ID;
    COMMIT;
    WHILE (K < 10) DO
            SELECT COUNT(*)
            FROM BOOKS_AND_READERS_FOR_LIBRARY
            WHERE BOOK_ID AND READER_ID BETWEEN K-9 AND K
            INTO QTY;
            INSERT INTO LIBRARY_STATS (RANGE_FROM, RANGE_TO, QUANTITY)
            VALUES (K-9, K, QTY);
            COMMIT;
            SET K = K + 100000;
        END WHILE;
END $$

DELIMITER ;

CALL CalcLibraryStats();

SELECT * FROM LIBRARY_STATS;

EXPLAIN SELECT COUNT(*)
        FROM BOOKS_AND_READERS_FOR_LIBRARY
        WHERE  BOOK_ID AND READER_ID BETWEEN 1 AND 10;

CREATE INDEX PHONENO ON BOOKS_AND_READERS_FOR_LIBRARY (BOOK_ID, READER_ID);

## THANK YOU FOR WATCHING
## I HOPE THAT YOU WILL CONTACT WITCH ME